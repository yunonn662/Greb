/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import DatabaseConnection.CustomerManager;
import DatabaseConnection.DBConnect;
import DatabaseConnection.DriverManager;
import Map.Graph;
import com.mysql.cj.jdbc.result.ResultSetMetaData;
import greb_app.Book;
import greb_app.Time;
import greb_app.Trip;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class CustomerView extends javax.swing.JFrame {
    Connection con;
    CustomerManager customer = new CustomerManager();
    DriverManager driver = new DriverManager();
    Book book = new Book();
    Time time = new Time();
    Trip trip = new Trip();
    public static String ratedrivername; //To store a driver name specifically for FeedBack frame.
    
    /**
     * Creates new form CustomerView
     */
    public CustomerView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Jcapacity3 = new javax.swing.JLabel();
        Jcapacity4 = new javax.swing.JLabel();
        Jcapacity5 = new javax.swing.JLabel();
        AddCustomerButton = new javax.swing.JButton();
        SelectDriverButton = new javax.swing.JButton();
        CYEntry = new javax.swing.JTextField();
        nameEntry = new javax.swing.JTextField();
        etaEntry = new javax.swing.JTextField();
        capacityEntry = new javax.swing.JTextField();
        CXEntry = new javax.swing.JTextField();
        DYEntry = new javax.swing.JTextField();
        DXEntry = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        DriverSelectionTable = new javax.swing.JTable();
        Jselect = new javax.swing.JLabel();
        selectEntry = new javax.swing.JTextField();
        UpdateCustomerButton = new javax.swing.JButton();
        SearchCustomerButton = new javax.swing.JButton();
        Jname = new javax.swing.JLabel();
        RequestButton = new javax.swing.JButton();
        Jeta = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        Jcapacity1 = new javax.swing.JLabel();
        DriverList_UpdateTime = new javax.swing.JLabel();
        Jcapacity = new javax.swing.JLabel();
        BackButton = new javax.swing.JButton();
        ClearButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 204, 153));

        Jcapacity3.setForeground(new java.awt.Color(0, 0, 0));
        Jcapacity3.setText("Current Longitude");
        Jcapacity3.setPreferredSize(new java.awt.Dimension(60, 32));

        Jcapacity4.setForeground(new java.awt.Color(0, 0, 0));
        Jcapacity4.setText("Current Latitude");
        Jcapacity4.setPreferredSize(new java.awt.Dimension(60, 32));

        Jcapacity5.setForeground(new java.awt.Color(0, 0, 0));
        Jcapacity5.setText("Destination Longitude");
        Jcapacity5.setPreferredSize(new java.awt.Dimension(60, 32));

        AddCustomerButton.setText("Add Customer");
        AddCustomerButton.setPreferredSize(new java.awt.Dimension(165, 38));
        AddCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddCustomerButtonActionPerformed(evt);
            }
        });

        SelectDriverButton.setText("Select");
        SelectDriverButton.setPreferredSize(new java.awt.Dimension(165, 38));
        SelectDriverButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectDriverButtonActionPerformed(evt);
            }
        });

        CYEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CYEntryActionPerformed(evt);
            }
        });

        nameEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameEntryActionPerformed(evt);
            }
        });

        etaEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                etaEntryActionPerformed(evt);
            }
        });

        capacityEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                capacityEntryActionPerformed(evt);
            }
        });

        CXEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CXEntryActionPerformed(evt);
            }
        });

        DYEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DYEntryActionPerformed(evt);
            }
        });

        DXEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DXEntryActionPerformed(evt);
            }
        });

        DriverSelectionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Capacity", "Estimate Arrival Time", "Reputation"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(DriverSelectionTable);

        Jselect.setForeground(new java.awt.Color(0, 0, 0));
        Jselect.setText("Driver");
        Jselect.setPreferredSize(new java.awt.Dimension(60, 32));

        selectEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectEntryActionPerformed(evt);
            }
        });

        UpdateCustomerButton.setText("Update Customer");
        UpdateCustomerButton.setPreferredSize(new java.awt.Dimension(165, 38));
        UpdateCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateCustomerButtonActionPerformed(evt);
            }
        });

        SearchCustomerButton.setText("Search Customer");
        SearchCustomerButton.setPreferredSize(new java.awt.Dimension(165, 38));
        SearchCustomerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchCustomerButtonActionPerformed(evt);
            }
        });

        Jname.setForeground(new java.awt.Color(0, 0, 0));
        Jname.setText("Name");
        Jname.setPreferredSize(new java.awt.Dimension(60, 32));

        RequestButton.setText("Request");
        RequestButton.setPreferredSize(new java.awt.Dimension(165, 38));
        RequestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RequestButtonActionPerformed(evt);
            }
        });

        Jeta.setForeground(new java.awt.Color(0, 0, 0));
        Jeta.setText("Expected Arrival Time");
        Jeta.setPreferredSize(new java.awt.Dimension(60, 32));

        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Current Time : "+time.current);

        Jcapacity1.setForeground(new java.awt.Color(0, 0, 0));
        Jcapacity1.setText("Destination Latitude");
        Jcapacity1.setPreferredSize(new java.awt.Dimension(60, 32));

        DriverList_UpdateTime.setForeground(new java.awt.Color(0, 0, 0));
        DriverList_UpdateTime.setText("List Last Updated Time : "+time.DLT);

        Jcapacity.setForeground(new java.awt.Color(0, 0, 0));
        Jcapacity.setText("Capacity");
        Jcapacity.setPreferredSize(new java.awt.Dimension(60, 32));

        BackButton.setBackground(new java.awt.Color(255, 255, 255));
        BackButton.setForeground(new java.awt.Color(0, 0, 0));
        BackButton.setText("Back");
        BackButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });

        ClearButton.setText("Clear");
        ClearButton.setPreferredSize(new java.awt.Dimension(165, 38));
        ClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(148, 148, 148)
                                .addComponent(CXEntry))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(Jcapacity5, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Jcapacity4, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Jcapacity3, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Jcapacity, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Jeta, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Jname, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Jcapacity1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CYEntry, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(DXEntry)
                                    .addComponent(capacityEntry)
                                    .addComponent(etaEntry)
                                    .addComponent(nameEntry, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(DYEntry))))
                        .addGap(80, 80, 80)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(SearchCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RequestButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(UpdateCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AddCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 865, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(SelectDriverButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Jselect, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DriverList_UpdateTime, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)))
                .addGap(0, 31, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 24, Short.MAX_VALUE)
                        .addComponent(AddCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(UpdateCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(SearchCustomerButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(135, 135, 135)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Jselect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(selectEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(RequestButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Jname, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nameEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Jeta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(etaEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Jcapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(capacityEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Jcapacity3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CXEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(CYEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Jcapacity4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DXEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Jcapacity5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DYEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Jcapacity1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(SelectDriverButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(DriverList_UpdateTime, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71)
                        .addComponent(BackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Button to go back to home page
    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed
        new HomePage().setVisible(true);
        dispose();
    }//GEN-LAST:event_BackButtonActionPerformed

    //Button to refresh available list of drivers with ETA calculated at the exact time the button is initiated.
    private void RequestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RequestButtonActionPerformed
        if(!nameEntry.getText().isEmpty()&&!capacityEntry.getText().isEmpty()&&!etaEntry.getText().isEmpty()&&
                !CXEntry.getText().isEmpty()&&!CYEntry.getText().isEmpty()&&
                !DXEntry.getText().isEmpty()&&!DYEntry.getText().isEmpty()){ //Make sure user fill up all the text field
            
            Time.DLT = time.current; //Update Last Updated Time of Driver Table
            DriverList_UpdateTime.setText("List Last Updated Time : "+time.DLT); //Jlable for showing the updated time of Driver Table
            String jname = nameEntry.getText();
            int jeta = Integer.parseInt(etaEntry.getText());
            int jcapacity = Integer.parseInt(capacityEntry.getText());
            double jcx = Double.parseDouble(CXEntry.getText());
            double jcy = Double.parseDouble(CYEntry.getText());
            double jdx = Double.parseDouble(DXEntry.getText());
            double jdy = Double.parseDouble(DYEntry.getText());
            try {
                Graph graph = book.CustomerGraph(jname);
                book.UpdateDriverEAT(graph, jname);
                DBConnect db = new DBConnect();
                con = db.connect();
                String query = "select name,capacity,eat,rating from driver where status='Available' AND capacity>='" + jcapacity + "' AND eat<='" + jeta + "'";
                PreparedStatement ps = this.con.prepareStatement(query); //PreparedStatement is a pre-compiled SQL statement to execute a parameterized query.
                ResultSet rs = ps.executeQuery(query); //Resultset contains the results of executing an SQL query.
                ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData(); //Used to get the metadata about a ResultSet object
                DefaultTableModel model = (DefaultTableModel)DriverSelectionTable.getModel(); //JTable
                String name, capacity, eat,reputation;
                model.setRowCount(0); //Clear all rows (Reset the table)
                
                while(rs.next()){ //The while loop gets all the existing driver on the database and display it on the table frame.
                    name=rs.getString(1);
                    capacity=rs.getString(2);
                    eat=rs.getString(3);
                    reputation=rs.getString(4);
                    
                    if(eat.length() == 1){ //To fix time bug showing 3 when time is 0003 at ETA column in the driver table
                        eat = "000" + eat;
                    }else if(eat.length() == 2){
                        eat = "00" + eat;
                    }else if(eat.length() == 3){
                        eat = "0" + eat;
                    }

                    String[] row={name, capacity, eat,reputation}; //Row of details to be added into the table
                    model.addRow(row);

                }
                ps.close();
                con.close();
            } catch (SQLException ex) {
                Logger.getLogger(CustomerView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            JOptionPane.showMessageDialog(null,"Please fill out the customer's details!");
        }//End of if statement
    }//GEN-LAST:event_RequestButtonActionPerformed
     
    //Button to autofill Customer(Request) details
    private void SearchCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {  
        if(!nameEntry.getText().isEmpty()){
            try {
                DBConnect db = new DBConnect();
                con = db.connect();
                String str = "Select * from customer where name=?";
                PreparedStatement pstm = con.prepareStatement(str); //PreparedStatement is a pre-compiled SQL statement to execute a parameterized query.
                pstm.setString(1, nameEntry.getText());
                ResultSet rs = pstm.executeQuery(); //Resultset contains the results of executing an SQL query.
                if(rs.next()){
                    nameEntry.setText(rs.getString("name"));
                    etaEntry.setText(rs.getString("eta"));
                    capacityEntry.setText(rs.getString("capacity"));
                    CXEntry.setText(rs.getString("current_X"));
                    CYEntry.setText(rs.getString("current_Y"));
                    DXEntry.setText(rs.getString("dest_X"));
                    DYEntry.setText(rs.getString("dest_Y"));
                }
            
            } catch (SQLException ex) {
                Logger.getLogger(CustomerView.class.getName()).log(Level.SEVERE, null, ex);
                
            }
        }else{
            JOptionPane.showMessageDialog(null,"Please provide customer's name to search!");
        }//End of if statement
     }  
//GEN-FIRST:event_SearchCustomerButtonActionPerformed
        
//GEN-LAST:event_SearchCustomerButtonActionPerformed

    //Button to update customer request and update an available list of driver with ETA calculated 
    //at the exact time the button is initiated.
    private void UpdateCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateCustomerButtonActionPerformed
        if(!nameEntry.getText().isEmpty()&&!capacityEntry.getText().isEmpty()&&!etaEntry.getText().isEmpty()&&
                !CXEntry.getText().isEmpty()&&!CYEntry.getText().isEmpty()&&
                !DXEntry.getText().isEmpty()&&!DYEntry.getText().isEmpty()){ //Make sure user fill up all the text field
            
            Time.DLT = time.current; //Update Last Updated Time of Driver Table
            Time.CLT = time.current; //Update Last Updated Time of Customer Table
            DriverList_UpdateTime.setText("List Last Updated Time : "+time.DLT); //Jlable for showing the updated time of Driver Table
            
            String jname = nameEntry.getText();
            int jeta = Integer.parseInt(etaEntry.getText());
            int jcapacity = Integer.parseInt(capacityEntry.getText());
            double jcx = Double.parseDouble(CXEntry.getText());
            double jcy = Double.parseDouble(CYEntry.getText());
            double jdx = Double.parseDouble(DXEntry.getText());
            double jdy = Double.parseDouble(DYEntry.getText());
            customer.updateCustomer(jname, jeta, jcapacity, jcx, jcy, jdx, jdy); //Function to update the customer's details
            
            JOptionPane.showMessageDialog(null,"Customer Request Updated Successfully. Please choose your driver!");

            try {
                Graph graph = book.CustomerGraph(jname); //Creating a graph for the customer
                book.UpdateDriverEAT(graph, jname); //Updating the Estimated Arrival Time of all drivers based on the current customer request.
                DBConnect db = new DBConnect();
                con = db.connect();
                String query = "select name,capacity,eat,rating from driver where status='Available' AND capacity>='" + jcapacity +"' AND eat<='" + jeta + "'";
                PreparedStatement ps = this.con.prepareStatement(query); //PreparedStatement is a pre-compiled SQL statement to execute a parameterized query.
                ResultSet rs = ps.executeQuery(query); //Resultset contains the results of executing an SQL query.
                ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData(); //Used to get the metadata about a ResultSet object
                DefaultTableModel model = (DefaultTableModel)DriverSelectionTable.getModel(); //JTable
                String name, capacity, eat,reputation;
                model.setRowCount(0); //Clear all rows (Reset the table)

                while(rs.next()){ //The while loop gets all the existing driver on the database and display it on the table frame.
                    name=rs.getString(1);
                    capacity=rs.getString(2);
                    eat=rs.getString(3);
                    reputation=rs.getString(4);
                    
                    if(eat.length() == 1){ //To fix time bug showing 3 when time is 0003 at ETA column in the driver table
                        eat = "000" + eat;
                    }else if(eat.length() == 2){
                        eat = "00" + eat;
                    }else if(eat.length() == 3){
                        eat = "0" + eat;
                    }

                    String[] row={name, capacity, eat,reputation}; //Row of details to be added into the table
                    model.addRow(row);

                }
                ps.close();
                con.close();

            } catch (SQLException ex) {
                Logger.getLogger(CustomerView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            JOptionPane.showMessageDialog(null,"Please fill out the customer's details!");
        }//End of if statement
    }//GEN-LAST:event_UpdateCustomerButtonActionPerformed

    private void selectEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectEntryActionPerformed

    }//GEN-LAST:event_selectEntryActionPerformed

    private void DXEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DXEntryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DXEntryActionPerformed

    private void DYEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DYEntryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DYEntryActionPerformed

    private void CXEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CXEntryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CXEntryActionPerformed

    private void capacityEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_capacityEntryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_capacityEntryActionPerformed

    private void etaEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_etaEntryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_etaEntryActionPerformed

    private void nameEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameEntryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameEntryActionPerformed

    private void CYEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CYEntryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CYEntryActionPerformed

    //Button for customer to select driver, then update available list of driver with ETA calculated 
    //at the exact time the button is initiated, then simulate the trip using timer in Trip class.
    private void SelectDriverButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectDriverButtonActionPerformed
        if(!nameEntry.getText().isEmpty()&&!capacityEntry.getText().isEmpty()&&!etaEntry.getText().isEmpty()&&
                !CXEntry.getText().isEmpty()&&!CYEntry.getText().isEmpty()&&
                !DXEntry.getText().isEmpty()&&!DYEntry.getText().isEmpty()){ //Make sure user fill up all the text field
            Time.CLT = time.current; //Update Last Updated Time of Customer Table
            Time.DLT = time.current; //Update Last Updated Time of Driver Table
            DriverList_UpdateTime.setText("List Last Updated Time : "+time.DLT); //Jlable for showing the updated time of Driver Table
            ratedrivername = selectEntry.getText();
            String jname = nameEntry.getText();
            String jdrivername = selectEntry.getText();
            int jeta = Integer.parseInt(etaEntry.getText());
            int jcapacity = Integer.parseInt(capacityEntry.getText());
            double jcx = Double.parseDouble(CXEntry.getText());
            double jcy = Double.parseDouble(CYEntry.getText());
            double jdx = Double.parseDouble(DXEntry.getText());
            double jdy = Double.parseDouble(DYEntry.getText());
            driver.setStatus_Unavailable(jdrivername); //Updating the status of driver to 'Unavailable' upon successful selection of drivers.
            customer.setStatus_Waiting(jname); //Updating the status of customer to 'Waiting' upon successful selection of drivers.
            
            try {
                Graph graph = book.CustomerGraph(jname); //Creating a graph for the customer
                book.UpdateDriverEAT(graph, jname);  //Updating the Estimated Arrival Time of all drivers based on the current customer request.
                DBConnect db = new DBConnect();
                con = db.connect();
                String query = "select name,capacity,eat,rating from driver where status='Available' AND capacity>='" + jcapacity +"' AND eat<='" + jeta + "'";
                PreparedStatement ps = this.con.prepareStatement(query); //PreparedStatement is a pre-compiled SQL statement to execute a parameterized query.
                ResultSet rs = ps.executeQuery(query); //Resultset contains the results of executing an SQL query.
                ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData(); //Used to get the metadata about a ResultSet object
                DefaultTableModel model = (DefaultTableModel)DriverSelectionTable.getModel(); //JTable
                String name, capacity, eat,reputation;
                model.setRowCount(0); //Clear all rows (Reset the table)

                while(rs.next()){ //The while loop gets all the existing driver on the database and display it on the table frame.
                    name=rs.getString(1);
                    capacity=rs.getString(2);
                    eat=rs.getString(3);
                    reputation=rs.getString(4);
                    
                    if(eat.length() == 1){ //To fix time bug showing 3 when time is 0003 at ETA column in the driver table
                        eat = "000" + eat;
                    }else if(eat.length() == 2){
                        eat = "00" + eat;
                    }else if(eat.length() == 3){
                        eat = "0" + eat;
                    }

                    String[] row={name, capacity, eat,reputation}; //Row of details to be added into the table
                    model.addRow(row);

                }
                driver.setPassenger(jdrivername, jname); //Updating the passenger of the driver upon successful selection of driver by customer
                trip.startTrip(jname, jdrivername, jcx, jcy, jdx, jdy, graph); //Initiate to simulate the whole trip.
                ps.close();
                con.close();
            }catch (SQLException ex) {
            Logger.getLogger(CustomerView.class.getName()).log(Level.SEVERE, null, ex);
            
            }
        }else{
            JOptionPane.showMessageDialog(null,"Please fill out the customer's details!");
        }//End of if statement

    }//GEN-LAST:event_SelectDriverButtonActionPerformed

    //Button to add customer request to database and update available list of driver with ETA calculated
    //at the exact time the button is initiated.
    private void AddCustomerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddCustomerButtonActionPerformed
        if(!nameEntry.getText().isEmpty()&&!capacityEntry.getText().isEmpty()&&!etaEntry.getText().isEmpty()&&
                !CXEntry.getText().isEmpty()&&!CYEntry.getText().isEmpty()&&
                !DXEntry.getText().isEmpty()&&!DYEntry.getText().isEmpty()){ //Make sure user fill up all the text field
            
            Time.CLT = time.current; //Update Last Updated Time of Customer Table
            Time.DLT = time.current; //Update Last Updated Time of Driver Table
            DriverList_UpdateTime.setText("List Last Updated Time : "+time.DLT); //Jlable for showing the updated time of Driver Table
            
            String jname = nameEntry.getText();
            int jeta = Integer.parseInt(etaEntry.getText());
            int jcapacity = Integer.parseInt(capacityEntry.getText());
            double jcx = Double.parseDouble(CXEntry.getText());
            double jcy = Double.parseDouble(CYEntry.getText());
            double jdx = Double.parseDouble(DXEntry.getText());
            double jdy = Double.parseDouble(DYEntry.getText());
            customer.addCustomer(jname, jeta, jcapacity, jcx, jcy, jdx, jdy); //Call function to add the customer to the database
            

            try {
                Graph graph = book.CustomerGraph(jname); //Creating a graph for the customer
                book.UpdateDriverEAT(graph, jname); //Updating the Estimated Arrival Time of all drivers based on the current customer request.
                DBConnect db = new DBConnect();
                con = db.connect();
                String query = "select name,capacity,eat,rating from driver where status='Available' AND capacity>='" + jcapacity +"' AND eat<='" + jeta + "'";
                PreparedStatement ps = this.con.prepareStatement(query); //PreparedStatement is a pre-compiled SQL statement to execute a parameterized query.
                ResultSet rs = ps.executeQuery(query); //Resultset contains the results of executing an SQL query.
                ResultSetMetaData rsmd = (ResultSetMetaData) rs.getMetaData(); //Used to get the metadata about a ResultSet object
                DefaultTableModel model = (DefaultTableModel)DriverSelectionTable.getModel(); //JTable
                String name, capacity, eat,reputation;
                model.setRowCount(0); //Clear all rows (Reset the table)
                
                while(rs.next()){ //The while loop gets all the existing driver on the database and display it on the table frame.
                    name=rs.getString(1);
                    capacity=rs.getString(2);
                    eat=rs.getString(3);
                    reputation=rs.getString(4);
                    
                    if(eat.length() == 1){ //To fix time bug showing 3 when time is 0003 at ETA column in the driver table
                        eat = "000" + eat;
                    }else if(eat.length() == 2){
                        eat = "00" + eat;
                    }else if(eat.length() == 3){
                        eat = "0" + eat;
                    }

                    String[] row={name, capacity, eat,reputation}; //Row of details to be added into the table
                    model.addRow(row);

                }
                ps.close();
                con.close();

            }catch (SQLException ex) {
                Logger.getLogger(CustomerView.class.getName()).log(Level.SEVERE, null, ex);
            }    
            }else{
            JOptionPane.showMessageDialog(null,"Please fill out the customer's details!");
        }//End of if statement

    }//GEN-LAST:event_AddCustomerButtonActionPerformed
    //Method to clear all the text field
    private void ClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButtonActionPerformed
        nameEntry.setText("");
        capacityEntry.setText("");
        etaEntry.setText("");
        CXEntry.setText("");
        CYEntry.setText("");
        DXEntry.setText("");
        DYEntry.setText("");
    }//GEN-LAST:event_ClearButtonActionPerformed

   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddCustomerButton;
    private javax.swing.JButton BackButton;
    private javax.swing.JTextField CXEntry;
    private javax.swing.JTextField CYEntry;
    private javax.swing.JButton ClearButton;
    private javax.swing.JTextField DXEntry;
    private javax.swing.JTextField DYEntry;
    private javax.swing.JLabel DriverList_UpdateTime;
    private javax.swing.JTable DriverSelectionTable;
    private javax.swing.JLabel Jcapacity;
    private javax.swing.JLabel Jcapacity1;
    private javax.swing.JLabel Jcapacity3;
    private javax.swing.JLabel Jcapacity4;
    private javax.swing.JLabel Jcapacity5;
    private javax.swing.JLabel Jeta;
    private javax.swing.JLabel Jname;
    private javax.swing.JLabel Jselect;
    private javax.swing.JButton RequestButton;
    private javax.swing.JButton SearchCustomerButton;
    private javax.swing.JButton SelectDriverButton;
    private javax.swing.JButton UpdateCustomerButton;
    private javax.swing.JTextField capacityEntry;
    private javax.swing.JTextField etaEntry;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField nameEntry;
    private javax.swing.JTextField selectEntry;
    // End of variables declaration//GEN-END:variables

}//End of CustomerView Class
